/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ExprBase_NilKeyword_0_1_or_SYMBOLTerminalRuleCall_2_1_or_VARIABLETerminalRuleCall_1_1;
	protected AbstractElementAlias match_ExprBase___LeftParenthesisKeyword_3_0_ConsKeyword_3_1___or___LeftParenthesisKeyword_4_0_ListKeyword_4_1___or___LeftParenthesisKeyword_7_0_SYMBOLTerminalRuleCall_7_1__;
	protected AbstractElementAlias match_ExprBase___LeftParenthesisKeyword_5_0_HdKeyword_5_1___or___LeftParenthesisKeyword_6_0_TlKeyword_6_1__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_ExprBase_NilKeyword_0_1_or_SYMBOLTerminalRuleCall_2_1_or_VARIABLETerminalRuleCall_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getNilKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getSYMBOLTerminalRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getVARIABLETerminalRuleCall_1_1()));
		match_ExprBase___LeftParenthesisKeyword_3_0_ConsKeyword_3_1___or___LeftParenthesisKeyword_4_0_ListKeyword_4_1___or___LeftParenthesisKeyword_7_0_SYMBOLTerminalRuleCall_7_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getConsKeyword_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getListKeyword_4_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getSYMBOLTerminalRuleCall_7_1())));
		match_ExprBase___LeftParenthesisKeyword_5_0_HdKeyword_5_1___or___LeftParenthesisKeyword_6_0_TlKeyword_6_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getHdKeyword_5_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getLeftParenthesisKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getExprBaseAccess().getTlKeyword_6_1())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSYMBOLRule())
			return getSYMBOLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVARIABLERule())
			return getVARIABLEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal SYMBOL: ('a' .. 'z') (('A' .. 'Z') | ('a' .. 'z') | ('0' .. '9'))* ('!' | '?')?;
	 */
	protected String getSYMBOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal VARIABLE:('A' .. 'Z') (('A' .. 'Z') | ('a' .. 'z') | ('0' .. '9'))* ('!' | '?')?;
	 */
	protected String getVARIABLEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ExprBase_NilKeyword_0_1_or_SYMBOLTerminalRuleCall_2_1_or_VARIABLETerminalRuleCall_1_1.equals(syntax))
				emit_ExprBase_NilKeyword_0_1_or_SYMBOLTerminalRuleCall_2_1_or_VARIABLETerminalRuleCall_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExprBase___LeftParenthesisKeyword_3_0_ConsKeyword_3_1___or___LeftParenthesisKeyword_4_0_ListKeyword_4_1___or___LeftParenthesisKeyword_7_0_SYMBOLTerminalRuleCall_7_1__.equals(syntax))
				emit_ExprBase___LeftParenthesisKeyword_3_0_ConsKeyword_3_1___or___LeftParenthesisKeyword_4_0_ListKeyword_4_1___or___LeftParenthesisKeyword_7_0_SYMBOLTerminalRuleCall_7_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExprBase___LeftParenthesisKeyword_5_0_HdKeyword_5_1___or___LeftParenthesisKeyword_6_0_TlKeyword_6_1__.equals(syntax))
				emit_ExprBase___LeftParenthesisKeyword_5_0_HdKeyword_5_1___or___LeftParenthesisKeyword_6_0_TlKeyword_6_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'nil' | VARIABLE | SYMBOL
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ExprBase_NilKeyword_0_1_or_SYMBOLTerminalRuleCall_2_1_or_VARIABLETerminalRuleCall_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' 'cons') | ('(' 'list') | ('(' SYMBOL)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) expr+=Expr
	 */
	protected void emit_ExprBase___LeftParenthesisKeyword_3_0_ConsKeyword_3_1___or___LeftParenthesisKeyword_4_0_ListKeyword_4_1___or___LeftParenthesisKeyword_7_0_SYMBOLTerminalRuleCall_7_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' 'hd') | ('(' 'tl')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) exprbase=ExprBase
	 */
	protected void emit_ExprBase___LeftParenthesisKeyword_5_0_HdKeyword_5_1___or___LeftParenthesisKeyword_6_0_TlKeyword_6_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
