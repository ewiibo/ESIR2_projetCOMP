/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Assignment cFunctionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_0 = (RuleCall)cFunctionsAssignment.eContents().get(0);
		
		//Program:
		//	functions+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment() { return cFunctionsAssignment; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_0() { return cFunctionsFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSymbolSYMBOLTerminalRuleCall_1_0 = (RuleCall)cSymbolAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionDefinitionParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//Function:
		//	'function' symbol=SYMBOL ':' definition=Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' symbol=SYMBOL ':' definition=Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//symbol=SYMBOL
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//SYMBOL
		public RuleCall getSymbolSYMBOLTerminalRuleCall_1_0() { return cSymbolSYMBOLTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=Definition
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//Definition
		public RuleCall getDefinitionDefinitionParserRuleCall_3_0() { return cDefinitionDefinitionParserRuleCall_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInputInputParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWriteKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputOutputParserRuleCall_6_0 = (RuleCall)cOutputAssignment_6.eContents().get(0);
		
		//Definition:
		//	'read' input=Input
		//	'%' commands=Commands
		//	'%' 'write' output=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' input=Input '%' commands=Commands '%' 'write' output=Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//input=Input
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_1_0() { return cInputInputParserRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//'write'
		public Keyword getWriteKeyword_5() { return cWriteKeyword_5; }
		
		//output=Output
		public Assignment getOutputAssignment_6() { return cOutputAssignment_6; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_6_0() { return cOutputOutputParserRuleCall_6_0; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandCommandParserRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOthercommandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOthercommandCommandParserRuleCall_1_1_0 = (RuleCall)cOthercommandAssignment_1_1.eContents().get(0);
		
		//Commands:
		//	command=Command (';' othercommand+=Command)*;
		@Override public ParserRule getRule() { return rule; }
		
		//command=Command (';' othercommand+=Command)*
		public Group getGroup() { return cGroup; }
		
		//command=Command
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_0_0() { return cCommandCommandParserRuleCall_0_0; }
		
		//(';' othercommand+=Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//othercommand+=Command
		public Assignment getOthercommandAssignment_1_1() { return cOthercommandAssignment_1_1; }
		
		//Command
		public RuleCall getOthercommandCommandParserRuleCall_1_1_0() { return cOthercommandCommandParserRuleCall_1_1_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAffectCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForeachCommandParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cCommandAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cNopKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//Command:
		//	WhileCommand | IfCommand | ForCommand | AffectCommand | ForeachCommand | {Command} 'nop';
		@Override public ParserRule getRule() { return rule; }
		
		//WhileCommand | IfCommand | ForCommand | AffectCommand | ForeachCommand | {Command} 'nop'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileCommand
		public RuleCall getWhileCommandParserRuleCall_0() { return cWhileCommandParserRuleCall_0; }
		
		//IfCommand
		public RuleCall getIfCommandParserRuleCall_1() { return cIfCommandParserRuleCall_1; }
		
		//ForCommand
		public RuleCall getForCommandParserRuleCall_2() { return cForCommandParserRuleCall_2; }
		
		//AffectCommand
		public RuleCall getAffectCommandParserRuleCall_3() { return cAffectCommandParserRuleCall_3; }
		
		//ForeachCommand
		public RuleCall getForeachCommandParserRuleCall_4() { return cForeachCommandParserRuleCall_4; }
		
		//{Command} 'nop'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Command}
		public Action getCommandAction_5_0() { return cCommandAction_5_0; }
		
		//'nop'
		public Keyword getNopKeyword_5_1() { return cNopKeyword_5_1; }
	}
	public class WhileCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WhileCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileCommand:
		//	'while' expr=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' expr=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class IfCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandsParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElsecommandsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElsecommandsCommandsParserRuleCall_4_1_0 = (RuleCall)cElsecommandsAssignment_4_1.eContents().get(0);
		private final Keyword cFiKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfCommand:
		//	'if' expr=Expr 'then' commands=Commands ('else' elsecommands=Commands)? 'fi';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expr=Expr 'then' commands=Commands ('else' elsecommands=Commands)? 'fi'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_3_0() { return cCommandsCommandsParserRuleCall_3_0; }
		
		//('else' elsecommands=Commands)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elsecommands=Commands
		public Assignment getElsecommandsAssignment_4_1() { return cElsecommandsAssignment_4_1; }
		
		//Commands
		public RuleCall getElsecommandsCommandsParserRuleCall_4_1_0() { return cElsecommandsCommandsParserRuleCall_4_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_5() { return cFiKeyword_5; }
	}
	public class ForCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandCommandsParserRuleCall_3_0 = (RuleCall)cCommandAssignment_3.eContents().get(0);
		private final Keyword cOdKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ForCommand:
		//	'for' expr=Expr 'do' command=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' expr=Expr 'do' command=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//command=Commands
		public Assignment getCommandAssignment_3() { return cCommandAssignment_3; }
		
		//Commands
		public RuleCall getCommandCommandsParserRuleCall_3_0() { return cCommandCommandsParserRuleCall_3_0; }
		
		//'od'
		public Keyword getOdKeyword_4() { return cOdKeyword_4; }
	}
	public class AffectCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AffectCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVarsParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsExprsParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		
		//AffectCommand:
		//	vars=Vars ':=' exprs=Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//vars=Vars ':=' exprs=Exprs
		public Group getGroup() { return cGroup; }
		
		//vars=Vars
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_0_0() { return cVarsVarsParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exprs=Exprs
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//Exprs
		public RuleCall getExprsExprsParserRuleCall_2_0() { return cExprsExprsParserRuleCall_2_0; }
	}
	public class ForeachCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ForeachCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarsParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandsParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cOdKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForeachCommand:
		//	'foreach' vars=Vars 'in' expr=Expr 'do' commands=Commands 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' vars=Vars 'in' expr=Expr 'do' commands=Commands 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//vars=Vars
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }
		
		//Vars
		public RuleCall getVarsVarsParserRuleCall_1_0() { return cVarsVarsParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//commands=Commands
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }
		
		//Commands
		public RuleCall getCommandsCommandsParserRuleCall_5_0() { return cCommandsCommandsParserRuleCall_5_0; }
		
		//'od'
		public Keyword getOdKeyword_6() { return cOdKeyword_6; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExprParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_1_1_0 = (RuleCall)cExprsAssignment_1_1.eContents().get(0);
		
		//Exprs:
		//	expr=Expr (',' exprs+=Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Expr (',' exprs+=Expr)*
		public Group getGroup() { return cGroup; }
		
		//expr=Expr
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0_0() { return cExprExprParserRuleCall_0_0; }
		
		//(',' exprs+=Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//exprs+=Expr
		public Assignment getExprsAssignment_1_1() { return cExprsAssignment_1_1; }
		
		//Expr
		public RuleCall getExprsExprParserRuleCall_1_1_0() { return cExprsExprParserRuleCall_1_1_0; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVARIABLETerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Vars:
		//	var=VARIABLE (',' vars+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VARIABLE (',' vars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//var=VARIABLE
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VARIABLE
		public RuleCall getVarVARIABLETerminalRuleCall_0_0() { return cVarVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_1_1_0() { return cVarsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprbaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprbaseExprBaseParserRuleCall_0_0 = (RuleCall)cExprbaseAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprbasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprbasesExprBaseParserRuleCall_1_1_0 = (RuleCall)cExprbasesAssignment_1_1.eContents().get(0);
		
		//Expr:
		//	exprbase=ExprBase ('=?' exprbases+=ExprBase)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exprbase=ExprBase ('=?' exprbases+=ExprBase)*
		public Group getGroup() { return cGroup; }
		
		//exprbase=ExprBase
		public Assignment getExprbaseAssignment_0() { return cExprbaseAssignment_0; }
		
		//ExprBase
		public RuleCall getExprbaseExprBaseParserRuleCall_0_0() { return cExprbaseExprBaseParserRuleCall_0_0; }
		
		//('=?' exprbases+=ExprBase)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_1_0() { return cEqualsSignQuestionMarkKeyword_1_0; }
		
		//exprbases+=ExprBase
		public Assignment getExprbasesAssignment_1_1() { return cExprbasesAssignment_1_1; }
		
		//ExprBase
		public RuleCall getExprbasesExprBaseParserRuleCall_1_1_0() { return cExprbasesExprBaseParserRuleCall_1_1_0; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LExpr");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//LExpr:
		//	expr+=Expr+;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=Expr+
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_0() { return cExprExprParserRuleCall_0; }
	}
	public class ExprBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExprBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprBaseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNilKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprBaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExprBaseAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cConsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cListKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cHdKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cExprParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cTlKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cExprParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//ExprBase:
		//	{ExprBase} 'nil' | {ExprBase} VARIABLE | {ExprBase} SYMBOL | '(' 'cons' LExpr ')' | '(' 'list' LExpr ')' | '(' 'hd'
		//	Expr ')' | '(' 'tl' Expr ')' | '(' SYMBOL LExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprBase} 'nil' | {ExprBase} VARIABLE | {ExprBase} SYMBOL | '(' 'cons' LExpr ')' | '(' 'list' LExpr ')' | '(' 'hd' Expr
		//')' | '(' 'tl' Expr ')' | '(' SYMBOL LExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExprBase} 'nil'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExprBase}
		public Action getExprBaseAction_0_0() { return cExprBaseAction_0_0; }
		
		//'nil'
		public Keyword getNilKeyword_0_1() { return cNilKeyword_0_1; }
		
		//{ExprBase} VARIABLE
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExprBase}
		public Action getExprBaseAction_1_0() { return cExprBaseAction_1_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_1() { return cVARIABLETerminalRuleCall_1_1; }
		
		//{ExprBase} SYMBOL
		public Group getGroup_2() { return cGroup_2; }
		
		//{ExprBase}
		public Action getExprBaseAction_2_0() { return cExprBaseAction_2_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2_1() { return cSYMBOLTerminalRuleCall_2_1; }
		
		//'(' 'cons' LExpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//'cons'
		public Keyword getConsKeyword_3_1() { return cConsKeyword_3_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_3_2() { return cLExprParserRuleCall_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' 'list' LExpr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//'list'
		public Keyword getListKeyword_4_1() { return cListKeyword_4_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_4_2() { return cLExprParserRuleCall_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'(' 'hd' Expr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//'hd'
		public Keyword getHdKeyword_5_1() { return cHdKeyword_5_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_5_2() { return cExprParserRuleCall_5_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'(' 'tl' Expr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//'tl'
		public Keyword getTlKeyword_6_1() { return cTlKeyword_6_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_6_2() { return cExprParserRuleCall_6_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//'(' SYMBOL LExpr ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_7_1() { return cSYMBOLTerminalRuleCall_7_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_7_2() { return cLExprParserRuleCall_7_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVARIABLETerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Input:
		//	var=VARIABLE (',' vars+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VARIABLE (',' vars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//var=VARIABLE
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VARIABLE
		public RuleCall getVarVARIABLETerminalRuleCall_0_0() { return cVarVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_1_1_0() { return cVarsVARIABLETerminalRuleCall_1_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVARIABLETerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//Output:
		//	var=VARIABLE (',' vars+=VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//var=VARIABLE (',' vars+=VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//var=VARIABLE
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//VARIABLE
		public RuleCall getVarVARIABLETerminalRuleCall_0_0() { return cVarVARIABLETerminalRuleCall_0_0; }
		
		//(',' vars+=VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=VARIABLE
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getVarsVARIABLETerminalRuleCall_1_1_0() { return cVarsVARIABLETerminalRuleCall_1_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final WhileCommandElements pWhileCommand;
	private final IfCommandElements pIfCommand;
	private final ForCommandElements pForCommand;
	private final AffectCommandElements pAffectCommand;
	private final ForeachCommandElements pForeachCommand;
	private final ExprsElements pExprs;
	private final VarsElements pVars;
	private final ExprElements pExpr;
	private final LExprElements pLExpr;
	private final ExprBaseElements pExprBase;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tVARIABLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pWhileCommand = new WhileCommandElements();
		this.pIfCommand = new IfCommandElements();
		this.pForCommand = new ForCommandElements();
		this.pAffectCommand = new AffectCommandElements();
		this.pForeachCommand = new ForeachCommandElements();
		this.pExprs = new ExprsElements();
		this.pVars = new VarsElements();
		this.pExpr = new ExprElements();
		this.pLExpr = new LExprElements();
		this.pExprBase = new ExprBaseElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SYMBOL");
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VARIABLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	functions+=Function*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' symbol=SYMBOL ':' definition=Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	'read' input=Input
	//	'%' commands=Commands
	//	'%' 'write' output=Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Commands:
	//	command=Command (';' othercommand+=Command)*;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	WhileCommand | IfCommand | ForCommand | AffectCommand | ForeachCommand | {Command} 'nop';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//WhileCommand:
	//	'while' expr=Expr 'do' commands=Commands 'od';
	public WhileCommandElements getWhileCommandAccess() {
		return pWhileCommand;
	}
	
	public ParserRule getWhileCommandRule() {
		return getWhileCommandAccess().getRule();
	}
	
	//IfCommand:
	//	'if' expr=Expr 'then' commands=Commands ('else' elsecommands=Commands)? 'fi';
	public IfCommandElements getIfCommandAccess() {
		return pIfCommand;
	}
	
	public ParserRule getIfCommandRule() {
		return getIfCommandAccess().getRule();
	}
	
	//ForCommand:
	//	'for' expr=Expr 'do' command=Commands 'od';
	public ForCommandElements getForCommandAccess() {
		return pForCommand;
	}
	
	public ParserRule getForCommandRule() {
		return getForCommandAccess().getRule();
	}
	
	//AffectCommand:
	//	vars=Vars ':=' exprs=Exprs;
	public AffectCommandElements getAffectCommandAccess() {
		return pAffectCommand;
	}
	
	public ParserRule getAffectCommandRule() {
		return getAffectCommandAccess().getRule();
	}
	
	//ForeachCommand:
	//	'foreach' vars=Vars 'in' expr=Expr 'do' commands=Commands 'od';
	public ForeachCommandElements getForeachCommandAccess() {
		return pForeachCommand;
	}
	
	public ParserRule getForeachCommandRule() {
		return getForeachCommandAccess().getRule();
	}
	
	//Exprs:
	//	expr=Expr (',' exprs+=Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Vars:
	//	var=VARIABLE (',' vars+=VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//Expr:
	//	exprbase=ExprBase ('=?' exprbases+=ExprBase)*;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//LExpr:
	//	expr+=Expr+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//ExprBase:
	//	{ExprBase} 'nil' | {ExprBase} VARIABLE | {ExprBase} SYMBOL | '(' 'cons' LExpr ')' | '(' 'list' LExpr ')' | '(' 'hd'
	//	Expr ')' | '(' 'tl' Expr ')' | '(' SYMBOL LExpr ')';
	public ExprBaseElements getExprBaseAccess() {
		return pExprBase;
	}
	
	public ParserRule getExprBaseRule() {
		return getExprBaseAccess().getRule();
	}
	
	//Input:
	//	var=VARIABLE (',' vars+=VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	var=VARIABLE (',' vars+=VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ('!' | '?')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal VARIABLE:
	//	'A'..'Z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ('!' | '?')?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
