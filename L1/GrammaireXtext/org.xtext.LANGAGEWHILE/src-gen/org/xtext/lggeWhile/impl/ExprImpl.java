/**
 * generated by Xtext 2.23.0
 */
package org.xtext.lggeWhile.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.lggeWhile.Expr;
import org.xtext.lggeWhile.ExprBase;
import org.xtext.lggeWhile.LggeWhilePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.lggeWhile.impl.ExprImpl#getExprbase <em>Exprbase</em>}</li>
 *   <li>{@link org.xtext.lggeWhile.impl.ExprImpl#getExprbase1 <em>Exprbase1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprImpl extends MinimalEObjectImpl.Container implements Expr
{
  /**
   * The cached value of the '{@link #getExprbase() <em>Exprbase</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprbase()
   * @generated
   * @ordered
   */
  protected ExprBase exprbase;

  /**
   * The cached value of the '{@link #getExprbase1() <em>Exprbase1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprbase1()
   * @generated
   * @ordered
   */
  protected ExprBase exprbase1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LggeWhilePackage.Literals.EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprBase getExprbase()
  {
    return exprbase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprbase(ExprBase newExprbase, NotificationChain msgs)
  {
    ExprBase oldExprbase = exprbase;
    exprbase = newExprbase;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LggeWhilePackage.EXPR__EXPRBASE, oldExprbase, newExprbase);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExprbase(ExprBase newExprbase)
  {
    if (newExprbase != exprbase)
    {
      NotificationChain msgs = null;
      if (exprbase != null)
        msgs = ((InternalEObject)exprbase).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LggeWhilePackage.EXPR__EXPRBASE, null, msgs);
      if (newExprbase != null)
        msgs = ((InternalEObject)newExprbase).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LggeWhilePackage.EXPR__EXPRBASE, null, msgs);
      msgs = basicSetExprbase(newExprbase, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LggeWhilePackage.EXPR__EXPRBASE, newExprbase, newExprbase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprBase getExprbase1()
  {
    return exprbase1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprbase1(ExprBase newExprbase1, NotificationChain msgs)
  {
    ExprBase oldExprbase1 = exprbase1;
    exprbase1 = newExprbase1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LggeWhilePackage.EXPR__EXPRBASE1, oldExprbase1, newExprbase1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExprbase1(ExprBase newExprbase1)
  {
    if (newExprbase1 != exprbase1)
    {
      NotificationChain msgs = null;
      if (exprbase1 != null)
        msgs = ((InternalEObject)exprbase1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LggeWhilePackage.EXPR__EXPRBASE1, null, msgs);
      if (newExprbase1 != null)
        msgs = ((InternalEObject)newExprbase1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LggeWhilePackage.EXPR__EXPRBASE1, null, msgs);
      msgs = basicSetExprbase1(newExprbase1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LggeWhilePackage.EXPR__EXPRBASE1, newExprbase1, newExprbase1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LggeWhilePackage.EXPR__EXPRBASE:
        return basicSetExprbase(null, msgs);
      case LggeWhilePackage.EXPR__EXPRBASE1:
        return basicSetExprbase1(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LggeWhilePackage.EXPR__EXPRBASE:
        return getExprbase();
      case LggeWhilePackage.EXPR__EXPRBASE1:
        return getExprbase1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LggeWhilePackage.EXPR__EXPRBASE:
        setExprbase((ExprBase)newValue);
        return;
      case LggeWhilePackage.EXPR__EXPRBASE1:
        setExprbase1((ExprBase)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LggeWhilePackage.EXPR__EXPRBASE:
        setExprbase((ExprBase)null);
        return;
      case LggeWhilePackage.EXPR__EXPRBASE1:
        setExprbase1((ExprBase)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LggeWhilePackage.EXPR__EXPRBASE:
        return exprbase != null;
      case LggeWhilePackage.EXPR__EXPRBASE1:
        return exprbase1 != null;
    }
    return super.eIsSet(featureID);
  }

} //ExprImpl
