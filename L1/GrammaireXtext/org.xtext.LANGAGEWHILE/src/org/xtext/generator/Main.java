/*
 * generated by Xtext 2.23.0
 */
package org.xtext.generator;

import com.google.inject.Inject;
import java.io.File;
import com.google.inject.Injector;
import com.google.inject.Provider;

import java.util.List;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.GeneratorContext;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.xtext.LggeWhileStandaloneSetup;

public class Main {
	
	public static String inputFile= "",  outputFile = "" ;
	public static int iAll =1 ,iFor = 0, iWhile=0 ,iIf=0 ,iForeach=0, iAffect=0;
	

	public static void main(String[] args) {
		if (args.length == 0) {
			//System.err.println("Aborting: no path to EMF resource provided!");
			manuel();
			return;
		}
		Injector injector = new LggeWhileStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		
		recupParam(args);
		main.runGenerator();
	}
	
	private static void recupParam(String[] args) {
		if(args[0].equals("-help"))
		{
			manuel(); return;
		}
		inputFile = args[0];
		
		for(int i=1; i<args.length; i++) {
			switch (args[i]) {
			case "-o":
				outputFile = args[++i];
				break;
			case "-all":
				iAll = Integer.parseInt(args[++i]);
				break;
			case "-for":
				iFor = Integer.parseInt(args[++i]);
				break;
			case "-while":
				iWhile = Integer.parseInt(args[++i]);
				break;
			case "-if":
				iIf = Integer.parseInt(args[++i]);
				break;
			case "-foreach":
				iFor = Integer.parseInt(args[++i]);
				break;
			case "-affect":
				iAffect = Integer.parseInt(args[++i]);
				break;

			default:
				break;
			}
		}
	}
	
	private static void manuel() {
		System.out.println("Affichage du manuel");
	}

	@Inject
	private Provider<ResourceSet> resourceSetProvider;

	@Inject
	private IResourceValidator validator;

	@Inject
	private LggeWhileGenerator generator;

	@Inject 
	private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator() {
		// existe du fichier source
		File input = new File(inputFile);
		if(!input.exists()) {
			System.out.println("Le fichier "+ input.getName()+" est introuvable");
			return;
		}
		
		// nom du fichier dest
		if(outputFile.equals(""))
			outputFile = inputFile;
		
		
		// Load the resource
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.getResource(URI.createFileURI(inputFile), true);

		// Validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}

		// Configure and start the generator
		fileAccess.setOutputPath("./");
		GeneratorContext context = new GeneratorContext();
		context.setCancelIndicator(CancelIndicator.NullImpl);
		generator.doGenerate(resource, fileAccess, context, outputFile, iAll, iAffect, iIf,iFor, iWhile, iForeach );

		System.out.println("Code generation finished.");
	}
}
