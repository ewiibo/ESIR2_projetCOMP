/*
 * generated by Xtext 2.23.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.lggeWhile.Function
import org.xtext.lggeWhile.Program
import org.xtext.lggeWhile.Definition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LggeWhileGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}

	
	def doGenerate(Resource resource , IFileSystemAccess2 fsa, IGeneratorContext context, String outputfile, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		
		for (p : resource.allContents.toIterable.filter(Program)) {
			fsa.generateFile(outputfile,p.compile(all, iAffect, iIf,iFor,iWhile,iForeach))
		}
	}
	
	def compile(Program prog, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		var functi =''''''
		
		for (func : prog.functions){
			functi += func.compile(all, iAffect,iIf, iFor, iWhile, iForeach)
		}
		return functi
		
	}
	
	def compile(Function func, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		'''
		function «func.symbol»:
		«func.definition.compile(all, iAffect,iIf, iFor, iWhile, iForeach)»
		'''
	}
	def compile (Definition d, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		'''
		read «d.input.vars.iterator.next()»
		%
			nop
		%
		read «d.output.vars.iterator.next()»
		'''
	}
}

