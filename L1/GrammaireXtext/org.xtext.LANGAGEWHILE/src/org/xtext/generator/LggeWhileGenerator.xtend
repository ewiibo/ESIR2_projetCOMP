/*
 * generated by Xtext 2.23.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.lggeWhile.Function
import org.xtext.lggeWhile.Program
import org.xtext.lggeWhile.Definition
import org.xtext.lggeWhile.WhileCommand
import org.xtext.lggeWhile.IfCommand
import org.xtext.lggeWhile.ForCommand
import org.xtext.lggeWhile.AffectCommand
import org.xtext.lggeWhile.ForeachCommand
import org.xtext.lggeWhile.NopCommand
import org.xtext.lggeWhile.Command
import org.xtext.lggeWhile.Expr
import org.xtext.lggeWhile.ExprBase
import org.xtext.lggeWhile.Vars
import org.xtext.lggeWhile.Exprs
import org.xtext.lggeWhile.LExpr

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LggeWhileGenerator extends AbstractGenerator {

	int all;int iAffect; int iIf
	int iFor; int iWhile;int iForeach
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}
	
	def doGenerate(Resource resource , IFileSystemAccess2 fsa, IGeneratorContext context, String outputfile, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		this.all = all
		this.iAffect = iAffect
		this.iIf = iIf
		this.iFor = iFor
		this.iWhile = iWhile
		this.iForeach = iForeach
		for (p : resource.allContents.toIterable.filter(Program)) {
			fsa.generateFile(outputfile,p.compile())
		}
	}
	
	def compile(Program prog){
		var functi =''''''
		
		for (func : prog.functions){
			functi += func.compile()
		}
		return functi
	}
	
	def compile(Function func){
		return '''
		function «func.symbol»: 
		«func.definition.compile()»
		'''
	}
	
	def compile (Definition d){
		'''
		read «FOR param: d.input.vars SEPARATOR ', '»«param»«ENDFOR»
		%
		«var space = ""»«for (var i = 0 ; i <all ; i++) space += ' '»«FOR com : d.commands.commands SEPARATOR ' ;'»«com.compile(space)»«ENDFOR»
		%
		write «FOR param: d.output.vars SEPARATOR ', '»«param»«ENDFOR»
		
		'''
	}
	
	def compile(Command c, String space){
		if(c instanceof WhileCommand) return c.compile(space)
		if(c instanceof IfCommand) return c.compile(space)
		if(c instanceof ForCommand) return c.compile(space)
		if(c instanceof AffectCommand) return c.compile(space)
		if(c instanceof ForeachCommand) return c.compile(space)
		if(c instanceof NopCommand) {return '''«space»nop'''}
	}
	
	def compile(WhileCommand w, String space){
		
		var spaceW = ""
		for (var i = 0 ; i <iWhile ; i++) spaceW += ' '
		spaceW = spaceW+space
		
		return '''
		«space»while «w.expr.compile» do
		«FOR com : w.commands.commands SEPARATOR " ;"»«com.compile(spaceW)»«ENDFOR»
		«space»od
		'''
	}
	
	def compile(IfCommand i, String space){
		var spaceI = ""
		for (var j = 0 ; j <iIf ; j++) spaceI += ' '
		spaceI = spaceI+space		
		return '''
		«space»if «i.expr.compile» then
		«FOR com : i.commands.commands SEPARATOR " ;"»«com.compile(spaceI)»«ENDFOR»
		«space»fi
		'''
	}
	
	def compile(ForCommand f, String space){
		var spaceF = ""
		for (var j = 0 ; j <iFor ; j++) spaceF += ' '
		spaceF = spaceF+space
		
		return '''
		«space»for «f.expr.compile» do
		«FOR com : f.command.commands SEPARATOR " ;"»«com.compile(spaceF)»«ENDFOR»
		«space»od
		'''
	}
	def compile(ForeachCommand f, String space){
		var spaceF = ""
		for (var j = 0 ; j <iForeach ; j++) spaceF += ' '
		spaceF = spaceF+space
		
		return '''
		«space»Foreach «f.vars.compile» in «f.expr.compile» do
		«FOR com : f.commands.commands SEPARATOR " ;"»«com.compile(spaceF)»«ENDFOR»
		«space»od
		'''
	}
	def compile(AffectCommand a, String space){
		var spaceA = ""
		var size = iAffect-space.length
		for (var j = 0 ; j <size ; j++) spaceA += ' '
		'''
		«space»«spaceA»«a.vars.compile» := «a.exprs.compile»
		'''
	}
	def compile(Expr expr){
		'''«expr.exprbase.compile»«IF expr.exprbase1!==null» =? «expr.exprbase1.compile»«ENDIF»'''
	}
	def compile(Vars v){
		'''«FOR param : v.vari SEPARATOR ', '»«param»«ENDFOR»'''
	}
	def compile(Exprs e){
		'''«FOR param : e.expr SEPARATOR ', '»«param.compile»«ENDFOR»'''
	}
	def compile(LExpr le){
		'''«FOR param : le.expr SEPARATOR ' '» «param.compile»«ENDFOR»'''
	}
	def compile(ExprBase e){
		if(e.value !== null) return '''«e.value»'''
		if(e.identitor !== null) return '''(«e.identitor» «e.lexpr.compile»)'''
		if(e.identitor1 !== null) return '''(«e.identitor1» «e.expr.compile»)'''
		if(e.symbol !== null) return '''(«e.symbol» «e.lexpr.compile»)'''
	}
	
}

