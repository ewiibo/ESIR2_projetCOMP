/*
 * generated by Xtext 2.23.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.lggeWhile.Function
import org.xtext.lggeWhile.Program

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LggeWhileGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def doGenerate(Resource resource , IFileSystemAccess2 fsa, IGeneratorContext context, String outputfile, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		for(p : resource.allContents.filter(Program).toIterable){
			fsa.generateFile(outputfile, p.compile(  all, iAffect, iIf,  iFor, iWhile, iForeach ))
		}
	}
	
	def compile(Program p, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		'''
		gsdjfshd ksdh kjsd jksh fkjds kjh sdkjfh
		'''
	}
	
	def comile(Function f, int all, int iAffect,  int iIf, int iFor, int iWhile, int iForeach){
		'''
		
		'''
	}
}