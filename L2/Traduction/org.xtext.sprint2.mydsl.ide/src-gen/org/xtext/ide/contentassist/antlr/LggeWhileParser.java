/*
 * generated by Xtext 2.12.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalLggeWhileParser;
import org.xtext.services.LggeWhileGrammarAccess;

public class LggeWhileParser extends AbstractContentAssistParser {

	@Inject
	private LggeWhileGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalLggeWhileParser createParser() {
		InternalLggeWhileParser result = new InternalLggeWhileParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getExprBaseAccess().getAlternatives(), "rule__ExprBase__Alternatives");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
					put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
					put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
					put(grammarAccess.getWhileCommandAccess().getGroup(), "rule__WhileCommand__Group__0");
					put(grammarAccess.getIfCommandAccess().getGroup(), "rule__IfCommand__Group__0");
					put(grammarAccess.getIfCommandAccess().getGroup_4(), "rule__IfCommand__Group_4__0");
					put(grammarAccess.getForCommandAccess().getGroup(), "rule__ForCommand__Group__0");
					put(grammarAccess.getAffectCommandAccess().getGroup(), "rule__AffectCommand__Group__0");
					put(grammarAccess.getForeachCommandAccess().getGroup(), "rule__ForeachCommand__Group__0");
					put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
					put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
					put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
					put(grammarAccess.getVarsAccess().getGroup_1(), "rule__Vars__Group_1__0");
					put(grammarAccess.getExprAccess().getGroup(), "rule__Expr__Group__0");
					put(grammarAccess.getExprAccess().getGroup_1(), "rule__Expr__Group_1__0");
					put(grammarAccess.getExprBaseAccess().getGroup_3(), "rule__ExprBase__Group_3__0");
					put(grammarAccess.getExprBaseAccess().getGroup_4(), "rule__ExprBase__Group_4__0");
					put(grammarAccess.getExprBaseAccess().getGroup_5(), "rule__ExprBase__Group_5__0");
					put(grammarAccess.getExprBaseAccess().getGroup_6(), "rule__ExprBase__Group_6__0");
					put(grammarAccess.getExprBaseAccess().getGroup_7(), "rule__ExprBase__Group_7__0");
					put(grammarAccess.getProgramAccess().getFunctionsAssignment(), "rule__Program__FunctionsAssignment");
					put(grammarAccess.getFunctionAccess().getSymbolAssignment_1(), "rule__Function__SymbolAssignment_1");
					put(grammarAccess.getFunctionAccess().getDefinitionAssignment_3(), "rule__Function__DefinitionAssignment_3");
					put(grammarAccess.getDefinitionAccess().getInputAssignment_1(), "rule__Definition__InputAssignment_1");
					put(grammarAccess.getDefinitionAccess().getCommandsAssignment_3(), "rule__Definition__CommandsAssignment_3");
					put(grammarAccess.getDefinitionAccess().getOutputAssignment_6(), "rule__Definition__OutputAssignment_6");
					put(grammarAccess.getInputAccess().getVarsAssignment_0(), "rule__Input__VarsAssignment_0");
					put(grammarAccess.getInputAccess().getVarsAssignment_1_1(), "rule__Input__VarsAssignment_1_1");
					put(grammarAccess.getOutputAccess().getVarsAssignment_0(), "rule__Output__VarsAssignment_0");
					put(grammarAccess.getOutputAccess().getVarsAssignment_1_1(), "rule__Output__VarsAssignment_1_1");
					put(grammarAccess.getCommandsAccess().getCommandsAssignment_0(), "rule__Commands__CommandsAssignment_0");
					put(grammarAccess.getCommandsAccess().getCommandsAssignment_1_1(), "rule__Commands__CommandsAssignment_1_1");
					put(grammarAccess.getNopCommandAccess().getExprAssignment(), "rule__NopCommand__ExprAssignment");
					put(grammarAccess.getWhileCommandAccess().getExprAssignment_1(), "rule__WhileCommand__ExprAssignment_1");
					put(grammarAccess.getWhileCommandAccess().getCommandsAssignment_3(), "rule__WhileCommand__CommandsAssignment_3");
					put(grammarAccess.getIfCommandAccess().getExprAssignment_1(), "rule__IfCommand__ExprAssignment_1");
					put(grammarAccess.getIfCommandAccess().getCommandsAssignment_3(), "rule__IfCommand__CommandsAssignment_3");
					put(grammarAccess.getIfCommandAccess().getElsecommandsAssignment_4_1(), "rule__IfCommand__ElsecommandsAssignment_4_1");
					put(grammarAccess.getForCommandAccess().getExprAssignment_1(), "rule__ForCommand__ExprAssignment_1");
					put(grammarAccess.getForCommandAccess().getCommandAssignment_3(), "rule__ForCommand__CommandAssignment_3");
					put(grammarAccess.getAffectCommandAccess().getVarsAssignment_0(), "rule__AffectCommand__VarsAssignment_0");
					put(grammarAccess.getAffectCommandAccess().getExprsAssignment_2(), "rule__AffectCommand__ExprsAssignment_2");
					put(grammarAccess.getForeachCommandAccess().getVarsAssignment_1(), "rule__ForeachCommand__VarsAssignment_1");
					put(grammarAccess.getForeachCommandAccess().getExprAssignment_3(), "rule__ForeachCommand__ExprAssignment_3");
					put(grammarAccess.getForeachCommandAccess().getCommandsAssignment_5(), "rule__ForeachCommand__CommandsAssignment_5");
					put(grammarAccess.getExprsAccess().getExprAssignment_0(), "rule__Exprs__ExprAssignment_0");
					put(grammarAccess.getExprsAccess().getExprAssignment_1_1(), "rule__Exprs__ExprAssignment_1_1");
					put(grammarAccess.getVarsAccess().getVariAssignment_0(), "rule__Vars__VariAssignment_0");
					put(grammarAccess.getVarsAccess().getVariAssignment_1_1(), "rule__Vars__VariAssignment_1_1");
					put(grammarAccess.getExprAccess().getExprbaseAssignment_0(), "rule__Expr__ExprbaseAssignment_0");
					put(grammarAccess.getExprAccess().getExprbase1Assignment_1_1(), "rule__Expr__Exprbase1Assignment_1_1");
					put(grammarAccess.getLExprAccess().getExprAssignment(), "rule__LExpr__ExprAssignment");
					put(grammarAccess.getExprBaseAccess().getValueAssignment_0(), "rule__ExprBase__ValueAssignment_0");
					put(grammarAccess.getExprBaseAccess().getValueAssignment_1(), "rule__ExprBase__ValueAssignment_1");
					put(grammarAccess.getExprBaseAccess().getValueAssignment_2(), "rule__ExprBase__ValueAssignment_2");
					put(grammarAccess.getExprBaseAccess().getIdentitorAssignment_3_1(), "rule__ExprBase__IdentitorAssignment_3_1");
					put(grammarAccess.getExprBaseAccess().getLexprAssignment_3_2(), "rule__ExprBase__LexprAssignment_3_2");
					put(grammarAccess.getExprBaseAccess().getIdentitorAssignment_4_1(), "rule__ExprBase__IdentitorAssignment_4_1");
					put(grammarAccess.getExprBaseAccess().getLexprAssignment_4_2(), "rule__ExprBase__LexprAssignment_4_2");
					put(grammarAccess.getExprBaseAccess().getIdentitor1Assignment_5_1(), "rule__ExprBase__Identitor1Assignment_5_1");
					put(grammarAccess.getExprBaseAccess().getExprAssignment_5_2(), "rule__ExprBase__ExprAssignment_5_2");
					put(grammarAccess.getExprBaseAccess().getIdentitor1Assignment_6_1(), "rule__ExprBase__Identitor1Assignment_6_1");
					put(grammarAccess.getExprBaseAccess().getExprAssignment_6_2(), "rule__ExprBase__ExprAssignment_6_2");
					put(grammarAccess.getExprBaseAccess().getSymbolAssignment_7_1(), "rule__ExprBase__SymbolAssignment_7_1");
					put(grammarAccess.getExprBaseAccess().getLexprAssignment_7_2(), "rule__ExprBase__LexprAssignment_7_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LggeWhileGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LggeWhileGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
