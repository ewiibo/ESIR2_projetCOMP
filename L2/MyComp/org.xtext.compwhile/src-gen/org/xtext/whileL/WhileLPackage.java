/**
 * generated by Xtext 2.23.0
 */
package org.xtext.whileL;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see org.xtext.whileL.WhileLFactory
 * @model kind="package"
 * @generated
 */
public interface WhileLPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "whileL";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.org/WhileL";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "whileL";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  WhileLPackage eINSTANCE = org.xtext.whileL.impl.WhileLPackageImpl.init();

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.ProgramImpl <em>Program</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.ProgramImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getProgram()
   * @generated
   */
  int PROGRAM = 0;

  /**
   * The feature id for the '<em><b>Functions</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM__FUNCTIONS = 0;

  /**
   * The number of structural features of the '<em>Program</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.FunctionImpl <em>Function</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.FunctionImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getFunction()
   * @generated
   */
  int FUNCTION = 1;

  /**
   * The feature id for the '<em><b>Symbol</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION__SYMBOL = 0;

  /**
   * The feature id for the '<em><b>Definition</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION__DEFINITION = 1;

  /**
   * The number of structural features of the '<em>Function</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.DefinitionImpl <em>Definition</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.DefinitionImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getDefinition()
   * @generated
   */
  int DEFINITION = 2;

  /**
   * The feature id for the '<em><b>Input</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEFINITION__INPUT = 0;

  /**
   * The feature id for the '<em><b>Commands</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEFINITION__COMMANDS = 1;

  /**
   * The feature id for the '<em><b>Output</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEFINITION__OUTPUT = 2;

  /**
   * The number of structural features of the '<em>Definition</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEFINITION_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.InputImpl <em>Input</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.InputImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getInput()
   * @generated
   */
  int INPUT = 3;

  /**
   * The feature id for the '<em><b>Vars</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int INPUT__VARS = 0;

  /**
   * The number of structural features of the '<em>Input</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int INPUT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.OutputImpl <em>Output</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.OutputImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getOutput()
   * @generated
   */
  int OUTPUT = 4;

  /**
   * The feature id for the '<em><b>Vars</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OUTPUT__VARS = 0;

  /**
   * The number of structural features of the '<em>Output</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OUTPUT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.CommandsImpl <em>Commands</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.CommandsImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getCommands()
   * @generated
   */
  int COMMANDS = 5;

  /**
   * The feature id for the '<em><b>Commands</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMMANDS__COMMANDS = 0;

  /**
   * The number of structural features of the '<em>Commands</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMMANDS_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.CommandImpl <em>Command</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.CommandImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getCommand()
   * @generated
   */
  int COMMAND = 6;

  /**
   * The number of structural features of the '<em>Command</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMMAND_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.NopCommandImpl <em>Nop Command</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.NopCommandImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getNopCommand()
   * @generated
   */
  int NOP_COMMAND = 7;

  /**
   * The feature id for the '<em><b>Expr</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NOP_COMMAND__EXPR = COMMAND_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Nop Command</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int NOP_COMMAND_FEATURE_COUNT = COMMAND_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.WhileCommandImpl <em>While Command</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.WhileCommandImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getWhileCommand()
   * @generated
   */
  int WHILE_COMMAND = 8;

  /**
   * The feature id for the '<em><b>Expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int WHILE_COMMAND__EXPR = COMMAND_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Commands</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int WHILE_COMMAND__COMMANDS = COMMAND_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>While Command</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int WHILE_COMMAND_FEATURE_COUNT = COMMAND_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.IfCommandImpl <em>If Command</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.IfCommandImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getIfCommand()
   * @generated
   */
  int IF_COMMAND = 9;

  /**
   * The feature id for the '<em><b>Expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_COMMAND__EXPR = COMMAND_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Commands</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_COMMAND__COMMANDS = COMMAND_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Elsecommands</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_COMMAND__ELSECOMMANDS = COMMAND_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>If Command</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_COMMAND_FEATURE_COUNT = COMMAND_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.ForCommandImpl <em>For Command</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.ForCommandImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getForCommand()
   * @generated
   */
  int FOR_COMMAND = 10;

  /**
   * The feature id for the '<em><b>Expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FOR_COMMAND__EXPR = COMMAND_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Command</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FOR_COMMAND__COMMAND = COMMAND_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>For Command</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FOR_COMMAND_FEATURE_COUNT = COMMAND_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.AffectCommandImpl <em>Affect Command</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.AffectCommandImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getAffectCommand()
   * @generated
   */
  int AFFECT_COMMAND = 11;

  /**
   * The feature id for the '<em><b>Vars</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AFFECT_COMMAND__VARS = COMMAND_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Exprs</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AFFECT_COMMAND__EXPRS = COMMAND_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>Affect Command</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AFFECT_COMMAND_FEATURE_COUNT = COMMAND_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.ForeachCommandImpl <em>Foreach Command</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.ForeachCommandImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getForeachCommand()
   * @generated
   */
  int FOREACH_COMMAND = 12;

  /**
   * The feature id for the '<em><b>Vars</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FOREACH_COMMAND__VARS = COMMAND_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FOREACH_COMMAND__EXPR = COMMAND_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Commands</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FOREACH_COMMAND__COMMANDS = COMMAND_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Foreach Command</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FOREACH_COMMAND_FEATURE_COUNT = COMMAND_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.ExprsImpl <em>Exprs</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.ExprsImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getExprs()
   * @generated
   */
  int EXPRS = 13;

  /**
   * The feature id for the '<em><b>Expr</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRS__EXPR = 0;

  /**
   * The number of structural features of the '<em>Exprs</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRS_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.VarsImpl <em>Vars</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.VarsImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getVars()
   * @generated
   */
  int VARS = 14;

  /**
   * The feature id for the '<em><b>Vari</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARS__VARI = 0;

  /**
   * The number of structural features of the '<em>Vars</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARS_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.ExprImpl <em>Expr</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.ExprImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getExpr()
   * @generated
   */
  int EXPR = 15;

  /**
   * The feature id for the '<em><b>Exprbase</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR__EXPRBASE = 0;

  /**
   * The number of structural features of the '<em>Expr</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.LExprImpl <em>LExpr</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.LExprImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getLExpr()
   * @generated
   */
  int LEXPR = 16;

  /**
   * The feature id for the '<em><b>Expr</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LEXPR__EXPR = 0;

  /**
   * The number of structural features of the '<em>LExpr</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LEXPR_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.whileL.impl.ExprBaseImpl <em>Expr Base</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.whileL.impl.ExprBaseImpl
   * @see org.xtext.whileL.impl.WhileLPackageImpl#getExprBase()
   * @generated
   */
  int EXPR_BASE = 17;

  /**
   * The feature id for the '<em><b>Value</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR_BASE__VALUE = 0;

  /**
   * The feature id for the '<em><b>Identitor</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR_BASE__IDENTITOR = 1;

  /**
   * The feature id for the '<em><b>Lexpr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR_BASE__LEXPR = 2;

  /**
   * The feature id for the '<em><b>Expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR_BASE__EXPR = 3;

  /**
   * The feature id for the '<em><b>Symbol</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR_BASE__SYMBOL = 4;

  /**
   * The number of structural features of the '<em>Expr Base</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPR_BASE_FEATURE_COUNT = 5;


  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Program</em>'.
   * @see org.xtext.whileL.Program
   * @generated
   */
  EClass getProgram();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.whileL.Program#getFunctions <em>Functions</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Functions</em>'.
   * @see org.xtext.whileL.Program#getFunctions()
   * @see #getProgram()
   * @generated
   */
  EReference getProgram_Functions();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Function</em>'.
   * @see org.xtext.whileL.Function
   * @generated
   */
  EClass getFunction();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.whileL.Function#getSymbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Symbol</em>'.
   * @see org.xtext.whileL.Function#getSymbol()
   * @see #getFunction()
   * @generated
   */
  EAttribute getFunction_Symbol();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.Function#getDefinition <em>Definition</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Definition</em>'.
   * @see org.xtext.whileL.Function#getDefinition()
   * @see #getFunction()
   * @generated
   */
  EReference getFunction_Definition();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Definition <em>Definition</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Definition</em>'.
   * @see org.xtext.whileL.Definition
   * @generated
   */
  EClass getDefinition();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.Definition#getInput <em>Input</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Input</em>'.
   * @see org.xtext.whileL.Definition#getInput()
   * @see #getDefinition()
   * @generated
   */
  EReference getDefinition_Input();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.Definition#getCommands <em>Commands</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Commands</em>'.
   * @see org.xtext.whileL.Definition#getCommands()
   * @see #getDefinition()
   * @generated
   */
  EReference getDefinition_Commands();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.Definition#getOutput <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Output</em>'.
   * @see org.xtext.whileL.Definition#getOutput()
   * @see #getDefinition()
   * @generated
   */
  EReference getDefinition_Output();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Input <em>Input</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Input</em>'.
   * @see org.xtext.whileL.Input
   * @generated
   */
  EClass getInput();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.whileL.Input#getVars <em>Vars</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Vars</em>'.
   * @see org.xtext.whileL.Input#getVars()
   * @see #getInput()
   * @generated
   */
  EAttribute getInput_Vars();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Output <em>Output</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Output</em>'.
   * @see org.xtext.whileL.Output
   * @generated
   */
  EClass getOutput();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.whileL.Output#getVars <em>Vars</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Vars</em>'.
   * @see org.xtext.whileL.Output#getVars()
   * @see #getOutput()
   * @generated
   */
  EAttribute getOutput_Vars();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Commands <em>Commands</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Commands</em>'.
   * @see org.xtext.whileL.Commands
   * @generated
   */
  EClass getCommands();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.whileL.Commands#getCommands <em>Commands</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Commands</em>'.
   * @see org.xtext.whileL.Commands#getCommands()
   * @see #getCommands()
   * @generated
   */
  EReference getCommands_Commands();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Command <em>Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Command</em>'.
   * @see org.xtext.whileL.Command
   * @generated
   */
  EClass getCommand();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.NopCommand <em>Nop Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Nop Command</em>'.
   * @see org.xtext.whileL.NopCommand
   * @generated
   */
  EClass getNopCommand();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.whileL.NopCommand#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Expr</em>'.
   * @see org.xtext.whileL.NopCommand#getExpr()
   * @see #getNopCommand()
   * @generated
   */
  EAttribute getNopCommand_Expr();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.WhileCommand <em>While Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>While Command</em>'.
   * @see org.xtext.whileL.WhileCommand
   * @generated
   */
  EClass getWhileCommand();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.WhileCommand#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expr</em>'.
   * @see org.xtext.whileL.WhileCommand#getExpr()
   * @see #getWhileCommand()
   * @generated
   */
  EReference getWhileCommand_Expr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.WhileCommand#getCommands <em>Commands</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Commands</em>'.
   * @see org.xtext.whileL.WhileCommand#getCommands()
   * @see #getWhileCommand()
   * @generated
   */
  EReference getWhileCommand_Commands();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.IfCommand <em>If Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>If Command</em>'.
   * @see org.xtext.whileL.IfCommand
   * @generated
   */
  EClass getIfCommand();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.IfCommand#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expr</em>'.
   * @see org.xtext.whileL.IfCommand#getExpr()
   * @see #getIfCommand()
   * @generated
   */
  EReference getIfCommand_Expr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.IfCommand#getCommands <em>Commands</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Commands</em>'.
   * @see org.xtext.whileL.IfCommand#getCommands()
   * @see #getIfCommand()
   * @generated
   */
  EReference getIfCommand_Commands();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.IfCommand#getElsecommands <em>Elsecommands</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Elsecommands</em>'.
   * @see org.xtext.whileL.IfCommand#getElsecommands()
   * @see #getIfCommand()
   * @generated
   */
  EReference getIfCommand_Elsecommands();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.ForCommand <em>For Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>For Command</em>'.
   * @see org.xtext.whileL.ForCommand
   * @generated
   */
  EClass getForCommand();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.ForCommand#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expr</em>'.
   * @see org.xtext.whileL.ForCommand#getExpr()
   * @see #getForCommand()
   * @generated
   */
  EReference getForCommand_Expr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.ForCommand#getCommand <em>Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Command</em>'.
   * @see org.xtext.whileL.ForCommand#getCommand()
   * @see #getForCommand()
   * @generated
   */
  EReference getForCommand_Command();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.AffectCommand <em>Affect Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Affect Command</em>'.
   * @see org.xtext.whileL.AffectCommand
   * @generated
   */
  EClass getAffectCommand();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.AffectCommand#getVars <em>Vars</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Vars</em>'.
   * @see org.xtext.whileL.AffectCommand#getVars()
   * @see #getAffectCommand()
   * @generated
   */
  EReference getAffectCommand_Vars();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.AffectCommand#getExprs <em>Exprs</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Exprs</em>'.
   * @see org.xtext.whileL.AffectCommand#getExprs()
   * @see #getAffectCommand()
   * @generated
   */
  EReference getAffectCommand_Exprs();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.ForeachCommand <em>Foreach Command</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Foreach Command</em>'.
   * @see org.xtext.whileL.ForeachCommand
   * @generated
   */
  EClass getForeachCommand();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.ForeachCommand#getVars <em>Vars</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Vars</em>'.
   * @see org.xtext.whileL.ForeachCommand#getVars()
   * @see #getForeachCommand()
   * @generated
   */
  EReference getForeachCommand_Vars();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.ForeachCommand#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expr</em>'.
   * @see org.xtext.whileL.ForeachCommand#getExpr()
   * @see #getForeachCommand()
   * @generated
   */
  EReference getForeachCommand_Expr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.ForeachCommand#getCommands <em>Commands</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Commands</em>'.
   * @see org.xtext.whileL.ForeachCommand#getCommands()
   * @see #getForeachCommand()
   * @generated
   */
  EReference getForeachCommand_Commands();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Exprs <em>Exprs</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Exprs</em>'.
   * @see org.xtext.whileL.Exprs
   * @generated
   */
  EClass getExprs();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.whileL.Exprs#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expr</em>'.
   * @see org.xtext.whileL.Exprs#getExpr()
   * @see #getExprs()
   * @generated
   */
  EReference getExprs_Expr();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Vars <em>Vars</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Vars</em>'.
   * @see org.xtext.whileL.Vars
   * @generated
   */
  EClass getVars();

  /**
   * Returns the meta object for the attribute list '{@link org.xtext.whileL.Vars#getVari <em>Vari</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Vari</em>'.
   * @see org.xtext.whileL.Vars#getVari()
   * @see #getVars()
   * @generated
   */
  EAttribute getVars_Vari();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.Expr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expr</em>'.
   * @see org.xtext.whileL.Expr
   * @generated
   */
  EClass getExpr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.Expr#getExprbase <em>Exprbase</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Exprbase</em>'.
   * @see org.xtext.whileL.Expr#getExprbase()
   * @see #getExpr()
   * @generated
   */
  EReference getExpr_Exprbase();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.LExpr <em>LExpr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>LExpr</em>'.
   * @see org.xtext.whileL.LExpr
   * @generated
   */
  EClass getLExpr();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.whileL.LExpr#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Expr</em>'.
   * @see org.xtext.whileL.LExpr#getExpr()
   * @see #getLExpr()
   * @generated
   */
  EReference getLExpr_Expr();

  /**
   * Returns the meta object for class '{@link org.xtext.whileL.ExprBase <em>Expr Base</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expr Base</em>'.
   * @see org.xtext.whileL.ExprBase
   * @generated
   */
  EClass getExprBase();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.whileL.ExprBase#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Value</em>'.
   * @see org.xtext.whileL.ExprBase#getValue()
   * @see #getExprBase()
   * @generated
   */
  EAttribute getExprBase_Value();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.whileL.ExprBase#getIdentitor <em>Identitor</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Identitor</em>'.
   * @see org.xtext.whileL.ExprBase#getIdentitor()
   * @see #getExprBase()
   * @generated
   */
  EAttribute getExprBase_Identitor();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.ExprBase#getLexpr <em>Lexpr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Lexpr</em>'.
   * @see org.xtext.whileL.ExprBase#getLexpr()
   * @see #getExprBase()
   * @generated
   */
  EReference getExprBase_Lexpr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.whileL.ExprBase#getExpr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expr</em>'.
   * @see org.xtext.whileL.ExprBase#getExpr()
   * @see #getExprBase()
   * @generated
   */
  EReference getExprBase_Expr();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.whileL.ExprBase#getSymbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Symbol</em>'.
   * @see org.xtext.whileL.ExprBase#getSymbol()
   * @see #getExprBase()
   * @generated
   */
  EAttribute getExprBase_Symbol();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  WhileLFactory getWhileLFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.ProgramImpl <em>Program</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.ProgramImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getProgram()
     * @generated
     */
    EClass PROGRAM = eINSTANCE.getProgram();

    /**
     * The meta object literal for the '<em><b>Functions</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PROGRAM__FUNCTIONS = eINSTANCE.getProgram_Functions();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.FunctionImpl <em>Function</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.FunctionImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getFunction()
     * @generated
     */
    EClass FUNCTION = eINSTANCE.getFunction();

    /**
     * The meta object literal for the '<em><b>Symbol</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute FUNCTION__SYMBOL = eINSTANCE.getFunction_Symbol();

    /**
     * The meta object literal for the '<em><b>Definition</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FUNCTION__DEFINITION = eINSTANCE.getFunction_Definition();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.DefinitionImpl <em>Definition</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.DefinitionImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getDefinition()
     * @generated
     */
    EClass DEFINITION = eINSTANCE.getDefinition();

    /**
     * The meta object literal for the '<em><b>Input</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DEFINITION__INPUT = eINSTANCE.getDefinition_Input();

    /**
     * The meta object literal for the '<em><b>Commands</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DEFINITION__COMMANDS = eINSTANCE.getDefinition_Commands();

    /**
     * The meta object literal for the '<em><b>Output</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DEFINITION__OUTPUT = eINSTANCE.getDefinition_Output();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.InputImpl <em>Input</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.InputImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getInput()
     * @generated
     */
    EClass INPUT = eINSTANCE.getInput();

    /**
     * The meta object literal for the '<em><b>Vars</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute INPUT__VARS = eINSTANCE.getInput_Vars();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.OutputImpl <em>Output</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.OutputImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getOutput()
     * @generated
     */
    EClass OUTPUT = eINSTANCE.getOutput();

    /**
     * The meta object literal for the '<em><b>Vars</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute OUTPUT__VARS = eINSTANCE.getOutput_Vars();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.CommandsImpl <em>Commands</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.CommandsImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getCommands()
     * @generated
     */
    EClass COMMANDS = eINSTANCE.getCommands();

    /**
     * The meta object literal for the '<em><b>Commands</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COMMANDS__COMMANDS = eINSTANCE.getCommands_Commands();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.CommandImpl <em>Command</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.CommandImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getCommand()
     * @generated
     */
    EClass COMMAND = eINSTANCE.getCommand();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.NopCommandImpl <em>Nop Command</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.NopCommandImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getNopCommand()
     * @generated
     */
    EClass NOP_COMMAND = eINSTANCE.getNopCommand();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute NOP_COMMAND__EXPR = eINSTANCE.getNopCommand_Expr();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.WhileCommandImpl <em>While Command</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.WhileCommandImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getWhileCommand()
     * @generated
     */
    EClass WHILE_COMMAND = eINSTANCE.getWhileCommand();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference WHILE_COMMAND__EXPR = eINSTANCE.getWhileCommand_Expr();

    /**
     * The meta object literal for the '<em><b>Commands</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference WHILE_COMMAND__COMMANDS = eINSTANCE.getWhileCommand_Commands();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.IfCommandImpl <em>If Command</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.IfCommandImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getIfCommand()
     * @generated
     */
    EClass IF_COMMAND = eINSTANCE.getIfCommand();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_COMMAND__EXPR = eINSTANCE.getIfCommand_Expr();

    /**
     * The meta object literal for the '<em><b>Commands</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_COMMAND__COMMANDS = eINSTANCE.getIfCommand_Commands();

    /**
     * The meta object literal for the '<em><b>Elsecommands</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_COMMAND__ELSECOMMANDS = eINSTANCE.getIfCommand_Elsecommands();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.ForCommandImpl <em>For Command</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.ForCommandImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getForCommand()
     * @generated
     */
    EClass FOR_COMMAND = eINSTANCE.getForCommand();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FOR_COMMAND__EXPR = eINSTANCE.getForCommand_Expr();

    /**
     * The meta object literal for the '<em><b>Command</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FOR_COMMAND__COMMAND = eINSTANCE.getForCommand_Command();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.AffectCommandImpl <em>Affect Command</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.AffectCommandImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getAffectCommand()
     * @generated
     */
    EClass AFFECT_COMMAND = eINSTANCE.getAffectCommand();

    /**
     * The meta object literal for the '<em><b>Vars</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference AFFECT_COMMAND__VARS = eINSTANCE.getAffectCommand_Vars();

    /**
     * The meta object literal for the '<em><b>Exprs</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference AFFECT_COMMAND__EXPRS = eINSTANCE.getAffectCommand_Exprs();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.ForeachCommandImpl <em>Foreach Command</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.ForeachCommandImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getForeachCommand()
     * @generated
     */
    EClass FOREACH_COMMAND = eINSTANCE.getForeachCommand();

    /**
     * The meta object literal for the '<em><b>Vars</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FOREACH_COMMAND__VARS = eINSTANCE.getForeachCommand_Vars();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FOREACH_COMMAND__EXPR = eINSTANCE.getForeachCommand_Expr();

    /**
     * The meta object literal for the '<em><b>Commands</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FOREACH_COMMAND__COMMANDS = eINSTANCE.getForeachCommand_Commands();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.ExprsImpl <em>Exprs</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.ExprsImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getExprs()
     * @generated
     */
    EClass EXPRS = eINSTANCE.getExprs();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRS__EXPR = eINSTANCE.getExprs_Expr();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.VarsImpl <em>Vars</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.VarsImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getVars()
     * @generated
     */
    EClass VARS = eINSTANCE.getVars();

    /**
     * The meta object literal for the '<em><b>Vari</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VARS__VARI = eINSTANCE.getVars_Vari();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.ExprImpl <em>Expr</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.ExprImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getExpr()
     * @generated
     */
    EClass EXPR = eINSTANCE.getExpr();

    /**
     * The meta object literal for the '<em><b>Exprbase</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPR__EXPRBASE = eINSTANCE.getExpr_Exprbase();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.LExprImpl <em>LExpr</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.LExprImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getLExpr()
     * @generated
     */
    EClass LEXPR = eINSTANCE.getLExpr();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LEXPR__EXPR = eINSTANCE.getLExpr_Expr();

    /**
     * The meta object literal for the '{@link org.xtext.whileL.impl.ExprBaseImpl <em>Expr Base</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.whileL.impl.ExprBaseImpl
     * @see org.xtext.whileL.impl.WhileLPackageImpl#getExprBase()
     * @generated
     */
    EClass EXPR_BASE = eINSTANCE.getExprBase();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPR_BASE__VALUE = eINSTANCE.getExprBase_Value();

    /**
     * The meta object literal for the '<em><b>Identitor</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPR_BASE__IDENTITOR = eINSTANCE.getExprBase_Identitor();

    /**
     * The meta object literal for the '<em><b>Lexpr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPR_BASE__LEXPR = eINSTANCE.getExprBase_Lexpr();

    /**
     * The meta object literal for the '<em><b>Expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPR_BASE__EXPR = eINSTANCE.getExprBase_Expr();

    /**
     * The meta object literal for the '<em><b>Symbol</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPR_BASE__SYMBOL = eINSTANCE.getExprBase_Symbol();

  }

} //WhileLPackage
