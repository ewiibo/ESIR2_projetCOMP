package org.xtext.generator;


import java.util.HashMap;

import org.antlr.runtime.tree.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.whileL.Function;
import org.xtext.whileL.Program;

public class WhileLGen extends AbstractGenerator{
	
	public HashMap<String, Func> tableFunc;
	public HashMap<String, String> tableSymb;
	@Override
	public void doGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// TODO Auto-generated method stub
		System.out.println("Dans doGenerate");
		org.eclipse.emf.common.util.TreeIterator<EObject> asa = input.getAllContents();
		System.out.println("Apres la gene de asa");
		while(asa.hasNext()) {
			EObject objet = (EObject) asa.next();
			if(objet instanceof Program) {
				functions((Program)objet);
			}
		}
	}
	
	public void functions(Program prog) {
		System.out.println("Dans functions");
		for(Function f : prog.getFunctions()) {
			Func funct = new Func(f.getSymbol());
			if(!Func.isDuplicate(f.getDefinition().getInput().getVars())) {
				funct.setIn(f.getDefinition().getInput().getVars().size());
			}else {
				System.out.println("Les variables d'entree sont dupliquee");
			}
			if(!Func.isDuplicate(f.getDefinition().getOutput().getVars())) {
				funct.setOut(f.getDefinition().getOutput().getVars().size());
			}else {
				System.out.println("Les variables de sortie sont dupliquee");
			}
			
			System.out.println(funct.toString());
			
			
		}
	}

}
